import Head from 'next/head';
//import Image from 'next/image';
import styles from '../styles/Home.module.css';
//import axios from 'axios';
//import { Buffer } from 'buffer';
import * as nbt from 'prismarine-nbt';


function onChange() {
  const isStructure = document.getElementById('mcstructure').checked;
  const input = document.getElementById('input');
  const reader = new FileReader();
  if (!input.files[0]) return;
  if (isStructure) {
    reader.addEventListener('load', () => loadStructure(reader));
    reader.readAsArrayBuffer(input.files[0]);
  } else {
    reader.addEventListener('load', () => loadJson(reader));
    reader.readAsText(input.files[0]);
  }
}

async function loadStructure(reader) {
  let value;
  try {
    const { parsed } = await  nbt.parse(Buffer.from(reader.result));
    value = JSON.stringify(parsed, null, 2);
  } catch(e) {
    value = String(e);
  }
  document.getElementById('preview').value = value;
}

function loadJson(reader) {
  document.getElementById('preview').value = reader.result;
}

function generateStructure() {
  const data = document.getElementById('preview').value;
  const errorPanel = document.getElementById('error');
  errorPanel.innerHTML = '';
  if (!data) return errorPanel.innerHTML = 'Error: JSONを入力してください';
  let structure;
  try {
    structure = nbt.writeUncompressed(JSON.parse(data), 'little');
  } catch(e) {
    errorPanel.innerHTML = String(e);
    return;
  }
  const blob = new Blob([ structure ]);
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = document.getElementById('fileName').value + '.mcstructure';
  a.click();
}

export default function Home() {
  return (
    <>
      <Head>
        <title>mcstructure converter</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
      <h1 className={styles.title}>mcstructure converter</h1>
      
      <div className={styles.label}>Select file</div><br/>  
      <fieldset className={styles.fieldset}>
        <div className={`${styles.form} ${styles.select}`}>
          Type:
          <div className="type">
            <input type="radio" onChange={onChange} id="mcstructure" name="type" defaultChecked/>
            <label htmlFor="mcstructure">mcstructure</label>
          </div>
          <div className="type">
            <input type="radio" onChange={onChange} id="json" name="type" />
            <label htmlFor="json">JSON</label>
          </div>
        </div>
        
        <input type="file" id="input" onChange={onChange}/><br/>
      </fieldset><br/>
      
      <div className={styles.label}>Preview</div><br />
      <textarea id="preview" className={styles.textarea}></textarea>
      <br/>
      <br/>
      <div id="error"></div>
      <fieldset className={styles.fieldset} id="result">
        <div className={styles.form}>
          Name:<input type="text" id="fileName" defaultValue="generated" style={{ "marginLeft": "0.5rem" }}/>.mcstructure
          <br/>
          <input type="button" value="Generate mcstructure!" onClick={generateStructure} style={{ "marginTop": "0.5rem"}}/>
        </div>
      </fieldset>
      </main>
    </>
  )
}